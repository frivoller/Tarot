@model Reading

<div class="container mt-5">
    <h1 class="text-center mb-4">Tarot Okuması</h1>
    
    <div class="row" id="cardSelection">
        <div class="col-md-4 text-center">
            <h3>Geçmiş</h3>
            <div class="selected-card" data-position="Past"></div>
        </div>
        <div class="col-md-4 text-center">
            <h3>Şimdi</h3>
            <div class="selected-card" data-position="Present"></div>
        </div>
        <div class="col-md-4 text-center">
            <h3>Gelecek</h3>
            <div class="selected-card" data-position="Future"></div>
        </div>
    </div>

    <div class="deck-carousel mt-5">
        <button class="carousel-arrow prev" id="prevCard">
            <i class="fas fa-chevron-left"></i>
        </button>
        
        <div id="cardsContainer" class="cards-carousel">
            @for (int i = 0; i < 22; i++)
            {
                <div class="card-container">
                    <div class="card-inner">
                        <div class="card-front">
                            <img src="/images/cards/back.jpg" alt="Kart" class="img-fluid">
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <button class="carousel-arrow next" id="nextCard">
            <i class="fas fa-chevron-right"></i>
        </button>
    </div>

    <div class="text-center mt-4">
        <button id="selectCard" class="btn btn-primary">Bu Kartı Seç</button>
        <button id="revealCards" class="btn btn-outline-light" style="display:none">Kartları Aç</button>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            const deckCard = document.getElementById('deckCard');
            const dropZones = document.querySelectorAll('.drop-zone');

            deckCard.addEventListener('touchstart', handleTouchStart, false);
            deckCard.addEventListener('touchmove', handleTouchMove, false);
            deckCard.addEventListener('touchend', handleTouchEnd, false);

            deckCard.addEventListener('mousedown', handleDragStart);
            document.addEventListener('mousemove', handleDragMove);
            document.addEventListener('mouseup', handleDragEnd);

            let isDragging = false;
            let currentDropZone = null;
            let offset = { x: 0, y: 0 };
            let originalPosition = { x: 0, y: 0 };

            function handleDragStart(e) {
                isDragging = true;
                const rect = deckCard.getBoundingClientRect();
                originalPosition = {
                    x: rect.left,
                    y: rect.top
                };
                
                if (e.type === 'mousedown') {
                    offset = {
                        x: e.clientX - rect.left,
                        y: e.clientY - rect.top
                    };
                }
                
                deckCard.style.position = 'absolute';
                deckCard.style.zIndex = '1000';
                deckCard.classList.add('dragging');
            }

            function handleDragMove(e) {
                if (!isDragging) return;
                
                e.preventDefault();
                
                const x = e.clientX - offset.x;
                const y = e.clientY - offset.y;
                
                deckCard.style.left = `${x}px`;
                deckCard.style.top = `${y}px`;

                // drop zone
                const dropZone = getDropZoneUnderPoint(e.clientX, e.clientY);
                
                if (dropZone !== currentDropZone) {
                    if (currentDropZone) {
                        currentDropZone.classList.remove('drag-over');
                    }
                    if (dropZone) {
                        dropZone.classList.add('drag-over');
                    }
                    currentDropZone = dropZone;
                }
            }

            function handleDragEnd(e) {
                if (!isDragging) return;
                
                isDragging = false;
                deckCard.classList.remove('dragging');
                
                if (currentDropZone) {
                    const position = currentDropZone.dataset.position;
                    currentDropZone.classList.remove('drag-over');
                    
                    $.post('/Tarot/SelectCard', { position: position }, function(response) {
                        if (response.success) {
                            updateSelectedCards();
                            if (response.cardsSelected === 3) {
                                $('#revealCards').show();
                            }
                        }
                    });
                }

                deckCard.style.position = 'relative';
                deckCard.style.left = 'auto';
                deckCard.style.top = 'auto';
                currentDropZone = null;
            }

            function getDropZoneUnderPoint(x, y) {
                return Array.from(dropZones).find(zone => {
                    const rect = zone.getBoundingClientRect();
                    return x >= rect.left && x <= rect.right && 
                           y >= rect.top && y <= rect.bottom;
                });
            }

            // Touch olayları icin yardımcı fonksiyonlar
            function handleTouchStart(e) {
                const touch = e.touches[0];
                handleDragStart({
                    clientX: touch.clientX,
                    clientY: touch.clientY,
                    type: 'touch'
                });
            }

            function handleTouchMove(e) {
                const touch = e.touches[0];
                handleDragMove({
                    clientX: touch.clientX,
                    clientY: touch.clientY,
                    preventDefault: () => e.preventDefault()
                });
            }

            function handleTouchEnd(e) {
                handleDragEnd(e);
            }

            function updateSelectedCards() {
                $.get('/Tarot/GetSelectedCards', function(cards) {
                    $('#selectedCards').empty();
                    cards.forEach(function(card) {
                        var cardHtml = `
                            <div class="col-md-4">
                                <div class="card-container">
                                    <div class="card-inner">
                                        <div class="card-front">
                                            <img src="/images/cards/back.jpg" alt="Kart Arkası" class="img-fluid">
                                        </div>
                                    </div>
                                </div>
                                <h4 class="text-center mt-2">${getPositionText(card.position)}</h4>
                            </div>
                        `;
                        $('#selectedCards').append(cardHtml);
                    });
                });
            }

            function displayRevealedCards(cards) {
                $('#selectedCards').empty();
                cards.forEach(function(card) {
                    var cardHtml = `
                        <div class="col-md-4">
                            <div class="card-container">
                                <div class="card-inner revealed">
                                    <div class="card-front">
                                        <img src="/images/cards/back.jpg" alt="Kart Arkası" class="img-fluid">
                                    </div>
                                    <div class="card-back">
                                        <img src="${card.imageUrl}" alt="${card.name}" class="img-fluid">
                                    </div>
                                </div>
                            </div>
                            <div class="card mt-3">
                                <div class="card-body">
                                    <h5 class="card-title">${card.name}</h5>
                                    <h6 class="card-subtitle mb-2 text-muted">${getPositionText(card.position)}</h6>
                                    <p class="card-text">${card.meaning}</p>
                                </div>
                            </div>
                        </div>
                    `;
                    $('#selectedCards').append(cardHtml);
                });
            }

            function getPositionText(position) {
                switch(position) {
                    case 'Past':
                        return 'Geçmiş';
                    case 'Present':
                        return 'Şimdi';
                    case 'Future':
                        return 'Gelecek';
                    default:
                        return position;
                }
            }
        });
    </script>
} 